openapi: 3.0.0
info:
  title: Students Compass
  description: Great API for students looking for a place to stay and spend your spare
    time on.
  termsOfService: http://swagger.io/terms/
  contact:
    email: studentscompass007@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/pgmarc/Students-Compass/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://student-compass-350106.appspot.com/api
  description: AppEngine server
- url: "http://localhost:{port}/api"
  description: Development server
  variables:
    port:
      enum:
      - "8089"
      default: "8089"
tags:
- name: places
  description: Interesting places
paths:
  /places:
    get:
      tags:
      - places
      summary: Get places by diferent criteria
      description: Get all the places given some criteria
      operationId: getAllPlaces
      parameters:
      - name: offset
        in: query
        description: Position where it will start to find places.
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: limit
        in: query
        description: Limit the number of places returned.
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
          default: 10
      - name: order
        in: query
        description: This field sets the order that will return the results. You can
          specify one value by giving only one string. In case that you want to order
          with multiple criteria you have to format them as SEMICOLON separated values.
          The ordering is done starting from the left to the right.
        required: false
        style: form
        explode: true
        schema:
          type: string
        examples:
          One Value:
            description: It will filter by place name ascending
            value: +name
          Multiple Values:
            description: It will filter by place name ascending and then by place
              rating descending
            value: +name;-rating
      - name: categories
        in: query
        description: This field filter places by its CATEGORY CASE INSENSITIVE. You
          can specify one value by giving only one string. In case that you want to
          order with multiple criteria you have to format them as SEMICOLON separated
          values. If the user puts an extra comma in the filtering it will also filter
          by UNDEFINED.
        required: false
        style: form
        explode: true
        schema:
          type: string
        examples:
          Bar filter:
            value: bar
          Stadium filter:
            value: stadium
          Multiple filters:
            description: "It will filter by bar, congress and supermarket"
            value: congress;bar;supermarket
          User puts extra semicolon:
            description: "It will filter by congress, bar, supermarket and undefined"
            value: congress; ;bar;supermarket
          All semicolons:
            description: It will ONLY filter by UNDEFINED
            value: ;;;
      - name: placeId
        in: query
        description: If you want to filter the places around any location you MUST
          specify the place that you want by giving the concrete placeId.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
        examples:
          ETSII:
            value: 0
          Benito Villamar√≠n:
            value: 3
      - name: minRadius
        in: query
        description: Set the minimun radius (in meters) when looking for places. It
          depends on the placeId given by parameter.
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: double
        examples:
          "500 metres":
            value: 500
          "1 kilometer":
            value: 1000
      - name: maxRadius
        in: query
        description: Set the maximum radius (in meters) when looking nearby places.
          It depends on the placeId given by parameter.
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: double
        examples:
          "1 kilometer":
            value: 1000
          "3 kilometers":
            value: 3000
      responses:
        "200":
          description: Return a list of places
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Places'
        "400":
          description: Request body was not well formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                value:
                  errorMessage: Bad request
                  code: 400
                  documentation: https://student-compass-350106.appspot.com/api/docs/index.html
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                value:
                  errorMessage: Place with id not found
                  code: 404
                  documentation: https://student-compass-350106.appspot.com/api/docs/index.html
    post:
      tags:
      - places
      summary: Create new places
      description: Creates new places with the given payload.
      operationId: addPlaces
      requestBody:
        description: Payload of the place
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
            examples:
              Add place:
                $ref: '#/components/examples/TestPlace'
              Other example:
                $ref: '#/components/examples/CatedralSevilla'
        required: true
      responses:
        "201":
          description: Succesfully created place.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
              examples:
                Place:
                  $ref: '#/components/examples/CatedralSevilla'
                Test Place:
                  $ref: '#/components/examples/TestPlace'
  /places/{placeId}:
    get:
      tags:
      - places
      summary: Get a place by id
      description: Get a place by id
      operationId: getAPlace
      parameters:
      - name: placeId
        in: path
        description: Id of the place
        required: true
        style: simple
        explode: false
        schema:
          type: integer
        examples:
          Estanislao Id:
            value: 5
          ETSII Id:
            value: 0
      responses:
        "200":
          description: Values retrieved of a particular place.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
              examples:
                Catedral de Sevilla:
                  $ref: '#/components/examples/CatedralSevilla'
                Test Place:
                  $ref: '#/components/examples/TestPlace'
                Estanislao:
                  $ref: '#/components/examples/Estanislao'
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                value:
                  errorMessage: Place with id not found
                  code: 404
                  documentation: https://student-compass-350106.appspot.com/api/docs/index.html
    put:
      tags:
      - places
      summary: Update a place by id
      description: Update place information given the place id.
      operationId: updatePlace
      parameters:
      - name: placeId
        in: path
        description: Id of the place
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 4
      requestBody:
        description: Response body of the data that wants to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
            examples:
              Update Test:
                $ref: '#/components/examples/UpdateTest'
              Test:
                $ref: '#/components/examples/TestPlace'
      responses:
        "204":
          description: Place was updated sucessfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
              examples:
                Place1:
                  $ref: '#/components/examples/CatedralSevilla'
                Place2:
                  $ref: '#/components/examples/TestPlace'
                Estanislao:
                  $ref: '#/components/examples/Estanislao'
        "400":
          description: Request body was not well formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                value:
                  errorMessage: Bad request
                  code: 400
                  documentation: https://student-compass-350106.appspot.com/api/docs/index.html
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                value:
                  errorMessage: Place with id not found
                  code: 404
                  documentation: https://student-compass-350106.appspot.com/api/docs/index.html
    delete:
      tags:
      - places
      summary: Delete a place
      description: Deletes the place with the given id.
      operationId: deletePlace
      parameters:
      - name: placeId
        in: path
        description: Id of the place
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "204":
          description: The resource was succesfully deleted.
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                value:
                  errorMessage: Place with id not found
                  code: 404
                  documentation: https://student-compass-350106.appspot.com/api/docs/index.html
  /places/{placeId}/reviews:
    get:
      tags:
      - reviews
      summary: Get all reviews from a place by id
      description: Get all reviews from a place by id
      operationId: getAllReviews
      parameters:
      - name: placeId
        in: path
        description: Id of the place
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "200":
          description: List of all the reviews from a particular place.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
              example: 
                
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                value:
                  errorMessage: Place with id not found
                  code: 404
                  documentation: https://student-compass-350106.appspot.com/api/docs/index.html
    post:
      tags:
      - reviews
      summary: Creates new reviews
      description: Creates new reviews with the given payload to the place.
      operationId: addReviews
      parameters:
      - name: placeId
        in: path
        description: Id of the place
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      requestBody:
        description: Payload of the review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        "201":
          description: Succesfully created place.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        "400":
          description: Request body was not well formed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                value:
                  errorMessage: Bad request
                  code: 400
                  documentation: https://student-compass-350106.appspot.com/api/docs/index.html
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                value:
                  errorMessage: Place with id not found
                  code: 404
                  documentation: https://student-compass-350106.appspot.com/api/docs/index.html
  /places/{placeId}/reviews/{reviewId}:
    get:
      tags:
      - reviews
      summary: Get the specified review
      description: Get the specified review from a place by id.
      operationId: getReview
      parameters:
      - name: placeId
        in: path
        description: Id of the place
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      - name: reviewId
        in: path
        description: Id of the review
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "200":
          description: Specified review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
              examples:
                Review 1:
                 $ref: '#/components/examples/review1'
                Review 5:
                 $ref: '#/components/examples/review5'
        "404":
          description: The given resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - reviews
      summary: Update the specified review
      description: Update the specified review.
      operationId: updateReview
      parameters:
      - name: placeId
        in: path
        description: Id of the place
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      - name: reviewId
        in: path
        description: Id of the review
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      requestBody:
        description: Payload of the updated review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        "204":
          description: Review successfully deleted.
        "400":
          description: Any parameter is not correct.
        "404":
          description: The given resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - reviews
      summary: Deletes a review
      description: Deletes the review with the given id
      operationId: deleteReview
      parameters:
      - name: placeId
        in: path
        description: Id of the place
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      - name: reviewId
        in: path
        description: Id of the review
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "204":
          description: Review successfully deleted
        "400":
          description: Any parameter is not correct
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events:
    get:
      tags:
      - events
      summary: Get all events
      description: Get all events
      operationId: getAllEvents
      responses:
        "200":
          description: List of events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - events
      summary: Creates new events
      description: Creates new events with the given payload
      operationId: addEvents
      requestBody:
        description: Payload of the event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "201":
          description: Succesfully created event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
              examples:
                Event1:
                  $ref: '#/components/examples/Event1'
                Event2:
                  $ref: '#/components/examples/Event2'
        "400":
          description: One or more parameters are not correct
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{eventId}:
    get:
      tags:
      - events
      summary: Get a event by id
      description: Get a event by id
      operationId: getEvent
      parameters:
      - name: eventId
        in: path
        description: Id of the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "200":
          description: Values retrieved of a particular event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
              examples:
                Event1:
                  $ref: '#/components/examples/Event1'
                Event2:
                  $ref: '#/components/examples/Event2'
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - events
      summary: Update the specified event
      description: Update the specified event
      operationId: updateEvent
      parameters:
      - name: eventId
        in: path
        description: Id of the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      requestBody:
        description: Payload of the updated event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        "204":
          description: Review successfully deleted
        "400":
          description: Any parameter is not correct
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - events
      summary: Deletes an event
      description: Deletes the event with the given id
      operationId: deleteEvent
      parameters:
      - name: eventId
        in: path
        description: Id of the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "204":
          description: Event successfully deleted
        "400":
          description: Any parameter is not correct
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{eventId}/reviews:
    get:
      tags:
      - reviews
      summary: Get all reviews from a event by id
      description: Get all reviews from a event by id
      operationId: getAllReviewsEvents
      parameters:
      - name: eventId
        in: path
        description: Id of the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "200":
          description: List of all the reviews from a particular event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
      - reviews
      summary: Creates new reviews
      description: Creates new reviews with the given payload to the event
      operationId: addReviewsEvent
      parameters:
      - name: eventId
        in: path
        description: Id of the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      requestBody:
        description: Payload of the review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        "201":
          description: Succesfully created event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        "400":
          description: Any of the parameters are not correct
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{eventId}/reviews/{reviewId}:
    get:
      tags:
      - reviews
      summary: Get the specified review
      description: Get the specified review from a event by id
      operationId: getReviewEvent
      parameters:
      - name: eventId
        in: path
        description: Id of the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      - name: reviewId
        in: path
        description: Id of the review
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "200":
          description: Specified review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
              examples:
                Review 3:
                 $ref: '#/components/examples/review3'
                Review 2:
                 $ref: '#/components/examples/review2'
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
      - reviews
      summary: Update the specified review
      description: Update the specified review
      operationId: updateReviewEvent
      parameters:
      - name: eventId
        in: path
        description: Id of the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      - name: reviewId
        in: path
        description: Id of the review
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      requestBody:
        description: Payload of the updated review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        "204":
          description: Review successfully deleted
        "400":
          description: Any parameter is not correct
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
      - reviews
      summary: Deletes a review
      description: Deletes the review with the given id
      operationId: deleteReviewEvent
      parameters:
      - name: eventId
        in: path
        description: Id of the place
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      - name: reviewId
        in: path
        description: Id of the review
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "204":
          description: Review successfully deleted
        "400":
          description: Any parameter is not correct
        "404":
          description: The given resource was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Accomodations:
      required:
      - numberOfRooms
      - payments
      - type
      type: object
      properties:
        numberOfRooms:
          type: integer
        type:
          type: string
          enum:
          - RESIDENCE
          - FLAT
        payments:
          type: array
          items:
            $ref: '#/components/schemas/AccomodationPayments'
      nullable: true
    AccomodationPayments:
      required:
      - description
      - mealService
      - paymentPeriod
      - price
      type: object
      properties:
        description:
          type: string
        price:
          type: number
          format: double
          example: 499.9
        paymentPeriod:
          type: string
          enum:
          - YEARLY
          - MONTHLY
        mealService:
          type: string
          enum:
          - ALL_MEALS
          - TWO_MEALS
          - SELF_CATERING
    Event:
      required:
      - contactEmail
      - date
      - name
      - organizators
      - price
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        date:
          type: string
          format: date-time
        website:
          type: string
        contactEmail:
          type: string
        types:
          type: string
          enum:
          - music
          - theater
          - art
          - cultural
        transport:
          type: string
          enum:
          - bus
          - train
          - bicycle
          - underground
        organizers:
          type: string
    Events:
      type: array
      items:
        $ref: '#/components/schemas/Event'
    Coordinates:
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          maximum: 90
          minimum: -90
          type: number
          description: The latitude of the place
          format: double
        longitude:
          maximum: 180
          minimum: -180
          type: number
          description: The longitude of the place
          format: double
      description: Coordinates of the place
    Place:
      required:
      - address
      - location
      - name
      type: object
      properties:
        name:
          type: string
          description: Name of the place or alias
        address:
          type: string
        category:
          type: string
          nullable: true
          enum:
          - SUPERMARKET
          - PHARMACY
          - ATM
          - BUSINESS
          - BAR
          - RESTAURANT
          - CHURCH
          - CINEMA
          - PARK
          - NIGTH_CLUB
          - MUSEUM
          - UNIVERSITY
          - GYM
          - CONGRESS
          - HOSPITAL
          - POLICE
          - TOURIST_ATTRACTION
          - ACCOMODATION
          - STADIUM
          - GAS_STATION
          - TRAIN_STATION
          - BUS_STATION
          - AIRPORT
          - PARKING
          - TAXI_STAND
          - SUBWAY_STATION
          - UNDEFINED
        email:
          type: string
          description: Contact email of the place
          nullable: true
        website:
          type: string
          description: Website of the place
          nullable: true
        accomodation:
          $ref: '#/components/schemas/Accomodations'
        location:
          $ref: '#/components/schemas/Coordinates'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Reviews'
    Places:
      type: array
      items:
        $ref: '#/components/schemas/Place'
    Reviews:
      type: array
      description: List of reviews that BELONGS to ONE PLACE. Reviews ARE NOT SHARED
        between places
      items:
        $ref: '#/components/schemas/Review'
    Review:
      required:
      - rating
      type: object
      properties:
        username:
          type: string
          description: Name of the author of the review
          nullable: true
          default: Anonymous
        description:
          type: string
          description: Review of the user
          nullable: true
          default: No description
        rating:
          maximum: 5
          minimum: 0
          type: number
          description: Rating given by the user
          format: double
    Error:
      required:
      - code
      - errorMessage
      type: object
      properties:
        errorMessage:
          type: string
          description: Cause of the error
        code:
          type: number
          description: HTTP status code of the response
        documentation:
          type: string
          description: Documentation related to the error
          default: https://student-compass-350106.appspot.com/api/docs/index.html
  responses:
    ResourceDeleted:
      description: The resource was succesfully deleted
    NotFound:
      description: The given resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            value:
              errorMessage: Place with id not found
              code: 404
              documentation: https://student-compass-350106.appspot.com/api/docs/index.html
    BadRequest:
      description: Request body was not well formed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            value:
              errorMessage: Bad request
              code: 400
              documentation: https://student-compass-350106.appspot.com/api/docs/index.html
  examples:
    Event1:
      summary: Pl√°cido Domingo Event
      description: Example the concert of Pl√°cido Domingo
      value:
        name: Noches de la Maestranza
        description: Una noche llena de magia en La Maestranza con Pl√°cido Domingo
        price: 150
        date: 17-09-2022 21:30
        website: https://www.entradas.com/event/placido-domingo-noches-de-la-maestranza-plaza-de-toros-de-la-maestranza-14621134/
        contactEmail: taquilla@teatrodelamaestranza.es
        types: music
        transport: bus
        organizers: La Maestranza
    Event2:
      summary: Segio Dalma's Concert
      description: Example the concert of Sergio Dalma
      value:
        name: Sergio Dalma
        description: Vuelve a disfrutar de los mayores exitos de Sergio Dalma
        price: 51
        date: 21-05-2022 21:00
        website: https://www.sergiodalma.es/event/sevilla/
        contactEmail: info.cite@eulen.com
        types: music
        transport: bus
        organizers: Cartuja Center
    CatedralSevilla:
      summary: La catedral de sevilla
      description: Example the seville cathedral
      value:
        name: Catedral de Sevilla
        address: "Av. de la Constituci√≥n, s/n, 41004 Sevilla"
        web: https://www.catedraldesevilla.es
        location:
          latitude: 37.38586299856296
          longitude: -5.993103877606445
    TestPlace:
      description: Example of Imaginary place
      value:
        name: This is a test of place
        email: test@testing.com
        address: C. Test s/n
        web: https://foobar.com
        location:
          latitude: 25.000777231550654
          longitude: -71.00017170317003
    UpdateTest:
      description: Example of Imaginary place
      value:
        name: This is an updated place
        email: updaetedTest@updatedtesting.com
        address: C.Update Test s/n
        web: https://updatedfoobar.com
    Estanislao:
      description: Example of a Place with Accomodation
      value:
        name: Residencia universitaria Estanislao del Campo
        email: estanislao@micampusliving.com
        address: "Ctra. Su Eminencia, 2A, 41013 Sevilla"
        website: https://micampusresidencias.com/micampus-estanislao
        rating: 4.0
        location:
          latitude: 37.35649060120476
          longitude: -5.9781261663374625
        reviews:
        - username: theLegend27
          description: "Muy buen sitio y bien mantenido, pero las comidas se podr√≠\
            an mejorar."
          rating: 4.0
        accomodation:
          numberOfRooms: 500
          payments:
          - description: Habitaci√≥n individual con cocina compartida
            price: 499.0
            paymentPeriod: YEARLY
            mealService: TWO_MEALS
            roomType: INDIVIDUAL
          - description: Habitaci√≥n compartida
            price: 299.0
            paymentPeriod: MONTHLY
            mealService: ALL_MEALS
            roomType: DOUBLE
          type: RESIDENCE
    review1: 
      description: Example of a review
      value:
        username: Beni123
        description: Increible relaci√≥n calidad/precio en la comida, 
          aunque un poco lento el servicio.
        rating: 4.0
    review2: 
      description: Example of a review
      value:
        username: Zarzu054
        description: Un muy mal servicio, la comida bastante mala y una localizacion pesima.
        rating: 1.0
    review3: 
      description: Example of a review
      value:
        username: KillerPro678
        description: De las mejores cervezas de la zona por un precio decente. El personal muy amable y servicial
        rating: 5.0
    review4: 
      description: Example of a review
      value:
        username: Beni123
        description: Increible relaci√≥n calidad/precio en la comida, 
          aunque un poco lento el servicio.
        rating: 4.0
    review5: 
      description: Example of a review
      value:
        username: Beni123
        description: Increible relaci√≥n calidad/precio en la comida, 
          aunque un poco lento el servicio.
        rating: 4.0
  requestBodies:
    Coordinates:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Coordinates'
    Place:
      description: Place to add
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Place'