openapi: 3.0.0
info:
  title: Students Compass
  description: |
    Great API for students looking for a place to stay and spend your spare time on.
  termsOfService: http://swagger.io/terms/
  contact:
    email: studentscompass007@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/pgmarc/Students-Compass/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http//pingo
  description: Production API server
- url: "http://localhost:{port}"
  description: Development server
  variables:
    port:
      enum:
      - "8089"
      default: "8089"
tags:
- name: places
  description: Interesting places
paths:
  /places:
    get:
      tags:
      - places
      summary: Get all places
      description: Get all places
      operationId: getAllPlaces
      responses:
        "200":
          description: List of places
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Places'
              examples:
                Place:
                  $ref: '#/components/examples/Place1'
                Place1:
                  $ref: '#/components/examples/Place2'
    post:
      tags:
      - places
      summary: Creates new places
      description: Creates new places with the given payload
      operationId: addPlaces
      requestBody:
        description: Payload of the place
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
        required: true
      responses:
        "201":
          description: Succesfully created place
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
  /places/{placeId}:
    get:
      tags:
      - places
      summary: Get a place by id
      description: Get a place by id
      operationId: getAPlace
      parameters:
      - name: placeId
        in: path
        description: Id of the place
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 1
      responses:
        "200":
          description: Values retrieved of a particular place
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
components:
  schemas:
    Coordinates:
      required:
      - latitude
      - longitude
      type: object
      properties:
        latitude:
          maximum: 90
          minimum: -90
          type: number
          description: The latitude of the place
          format: double
        longitude:
          maximum: 180
          minimum: -180
          type: number
          description: The longitude of the place
          format: double
    Place:
      required:
      - address
      - location
      - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        address:
          type: string
        rating:
          type: integer
          format: int32
        website:
          type: string
        location:
          $ref: '#/components/schemas/Coordinates'
    Places:
      type: array
      items:
        $ref: '#/components/schemas/Place'
  examples:
    Place1:
      summary: Gran ilustre place
      description: Example the library gran ilustre
      value:
        name: La biblioteca del gran ilustre
        email: ilustre@gmail.com
        address: Gran ilustre s/n
        rating: 5
        web: granilustre.com
        location:
          latitude: 40.0
          longitude: -65.4
    Place2:
      description: Example of a Place1
      value:
        name: La biblioteca del gran ilustre 1
        email: ilustre@gmail.com
        address: Gran ilustre s/n
        rating: 5
        web: granilustre.com
        location:
          latitude: 40.0
          longitude: -65.4
  requestBodies:
    Coordinates:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Coordinates'
    Place:
      description: Place to add
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Place'
